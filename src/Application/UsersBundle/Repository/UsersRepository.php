<?php
namespace Application\UsersBundle\Repository;
use Application\UsersBundle\Entity\Users;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByTypeUser($slugType, $controller=null)
    {   
        
        $qb = $this->createQueryBuilder('u');
        
        if($controller == 1){
            // Consultant sur le formulaire Agenda par orde alphabetique
            $qb ->where('u.roles LIKE :type')
                ->setParameter('type', '%'.$slugType.'%')
                ->orderBy('u.nom', "ASC");
            ;
        }
        else{
            $qb ->where('u.roles LIKE :type')
                ->setParameter('type', '%'.$slugType.'%')
                ->orderBy('u.id', "DESC");
            ;
        }
        return $qb
          ->getQuery()
          ->getResult()
        ; 
    }
    
    /**
     * rÃ©cupÃ¨re les consultants
     *
     * @param Users $users
     * @return \Doctrine\ORM\NativeQuery
     */
    public function search(Users $users)
    {
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('Application\UsersBundle\Entity\Users','b');

        $query = 'SELECT u.* FROM users u WHERE 1';
        $params = array();


        $query .= ' AND u.roles = :roles';
        $params['roles'] = "ROLE_CONSULTANT";

        $request = $this->getEntityManager()->createNativeQuery($query,$rsm);
        $request->setParameters($params);

        return $request;
    }
}

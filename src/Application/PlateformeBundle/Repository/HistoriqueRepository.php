<?php

namespace Application\PlateformeBundle\Repository;

use Doctrine\ORM\Query\ResultSetMappingBuilder;


/**
 * HistoriqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoriqueRepository extends \Doctrine\ORM\EntityRepository
{
    // Historique inferieur Ã  la date du jour
    public function historiquepast($datedujour, $beneficiaireid)
    {
        $ar = 'on';
        return
            $this
                ->createQueryBuilder('h')
                ->where('h.beneficiaire = :benef')
                ->setParameter('benef', $beneficiaireid)
                ->andwhere('h.eventarchive <> :arch')
                ->setParameter('arch', $ar)
                ->orderBy('h.dateDebut', 'DESC')
                ->getQuery()
                ->getResult();
    }

    public function findEventByDate($date)
    {
        $queryBuilder = $this->createQueryBuilder("h")
            ->where("h.dateDebut LIKE :date")
            ->setParameter("date", $date . '%')
            ->andWhere("h.eventarchive != :archive")
            ->setParameter("archive", 'on');
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;
    }

    public function findEventByDateAndConsultant($date, $consultant)
    {
        $queryBuilder = $this->createQueryBuilder("h")
            ->where("h.dateDebut LIKE :date")
            ->andWhere("h.consultant = :consultant")
            ->andWhere("h.eventarchive != :archive")
            ->setParameters(array(
                "date" => $date . '%',
                "consultant" => $consultant,
                "archive" => 'on'
            ))
            ->orderBy("h.heuredebut", "ASC");

        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;
    }

    public function getLastRv1orRv2($beneficiaire){
        $queryBuilder = $this->createQueryBuilder("h")
            ->where("h.beneficiaire = :beneficiaire")
            ->andWhere("h.summary = :rv1 OR h.summary = :rv2")
            ->andWhere("h.dateDebut <= :date")
            ->setParameters(array(
                "beneficiaire" => $beneficiaire,
                "rv1" => "RV1",
                "rv2" => "RV2",
                "date" => new \DateTime('now')
            ))
            ->orderBy("h.dateDebut", "DESC")
            ->setMaxResults(1)
        ;

        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;
    }

    public function getLastRv1($beneficiaire, $summary = null, $limit= null, $order = null){
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('Application\PlateformeBundle\Entity\Historique','h');

        $query = 'SELECT h.* FROM historique h';
        $params = array();

        $query .= ' WHERE 1';

        $query .= ' AND h.beneficiaire_id = :beneficiaire_id';
        $params['beneficiaire_id'] = $beneficiaire->getId();

        if(!is_null($summary)) {
            $query .= ' AND h.summary = :summary';
            $params['summary'] = $summary;
        }



        if (!is_null($order)){
            $query .= ' ORDER BY h.date_debut DESC';
        }

        if (!is_null($limit)){
            $query .= ' LIMIT :limit';
            $params['limit'] = $limit;
        }


        $request = $this->getEntityManager()->createNativeQuery($query,$rsm);
        $request->setParameters($params);

        return $request;
    }

    // Renvoie l'historique d'un beneficiaire donnÃ©es
    public function beneficiaireOne($beneficiaireid){
        $datedujour = new \DateTime('now');
        $ar = 'on';
        return $this
            ->createQueryBuilder('h')
            ->where('h.beneficiaire = :benef')
            ->setParameter('benef',$beneficiaireid)
            ->andWhere('h.dateDebut >= :datedeb')
            ->setParameter('datedeb', $datedujour)
            ->andwhere('h.eventarchive <> :arch')
            ->setParameter('arch',$ar)
            ->getQuery()
            ->getResult();
    }

    public function getHistoriqueConsultantForBeneficiaire($beneficiaire){
        $queryBuilder = $this->createQueryBuilder("h")
            ->where('h.beneficiaire = :beneficiaire')
            ->setParameter("beneficiaire", $beneficiaire)
            ->andWhere("h.description LIKE '%Ajout/modification de consultant%'")
            ->orderBy('h.id' , 'DESC');

        $query = $queryBuilder->getQuery();
        //var_dump($query->getDql());
        $results = $query->getResult();
        return $results;
    }

}

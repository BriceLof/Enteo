<?php

namespace Application\PlateformeBundle\Repository;

use Application\PlateformeBundle\Entity\Beneficiaire;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllFacture($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('f')
            ->orderBy('f.id', 'DESC')
        ;

        $query->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage);

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query);
    }

    public function search($statut = null,
           $dateDebutAccompagnement = null, $dateFinAccompagnement = null,
           $dateDebutAccompagnementStart = null, $dateDebutAccompagnementEnd = null,
           $dateFinAccompagnementStart = null, $dateFinAccompagnementEnd = null,
           $dateFactureStart = null, $dateFactureEnd = null,
           $consultant = null, Beneficiaire $beneficiaire = null,
           $numeroFacture = null, $financeur = null, $villeMer = null,
           $datePaiementStart = null, $datePaiementEnd = null
    )
    {

        $queryBuilder = $this->createQueryBuilder("f")
            ->innerJoin('f.beneficiaire', 'b')
            ->addSelect('b')
            ->innerJoin('b.villeMer', 'v')
            ->addSelect('v');
        $arrayParameters = array();

        if(!is_null($beneficiaire)){
            $queryBuilder->andWhere("f.beneficiaire = :beneficiaire");
            $arrayParameters['beneficiaire'] = $beneficiaire;
        }

        if(!is_null($statut)){
            $queryBuilder->andWhere("f.statut = :statut");
            $arrayParameters['statut'] = $statut;
        }

        // Date a gérer en égalité ou en interval

        if(!is_null($dateDebutAccompagnement) && !is_null($dateFinAccompagnement)){
            $queryBuilder->andWhere("f.dateDebutAccompagnement >= :dateDebutAccompagnement AND f.dateFinAccompagnement <= :dateFinAccompagnement");
            $arrayParameters['dateDebutAccompagnement'] = $dateDebutAccompagnement;
            $arrayParameters['dateFinAccompagnement'] = $dateFinAccompagnement;
        }

        if(!is_null($dateDebutAccompagnementStart) && !is_null($dateDebutAccompagnementEnd)){
            $queryBuilder->andWhere("f.dateDebutAccompagnement >= :dateDebutAccompagnementStart AND f.dateDebutAccompagnement <= :dateDebutAccompagnementEnd");
            $arrayParameters['dateDebutAccompagnementStart'] = $dateDebutAccompagnementStart;
            $arrayParameters['dateDebutAccompagnementEnd'] = $dateDebutAccompagnementEnd;
        }
        if(!is_null($dateFinAccompagnementStart) && !is_null($dateFinAccompagnementEnd)){
            $queryBuilder->andWhere("f.dateFinAccompagnement >= :dateFinAccompagnementStart AND f.dateFinAccompagnement <= :dateFinAccompagnementEnd");
            $arrayParameters['dateFinAccompagnementStart'] = $dateFinAccompagnementStart;
            $arrayParameters['dateFinAccompagnementEnd'] = $dateFinAccompagnementEnd;
        }

        if(!is_null($dateFactureStart) && !is_null($dateFactureEnd)){
            $queryBuilder->andWhere("f.date >= :dateFactureStart AND f.date <= :dateFactureEnd");
            $arrayParameters['dateFactureStart'] = $dateFactureStart;
            $arrayParameters['dateFactureEnd'] = $dateFactureEnd;
        }

        if(!is_null($datePaiementStart) && !is_null($datePaiementEnd)){
            $queryBuilder->andWhere("f.datePaiement >= :datePaiementStart AND f.datePaiement <= :datePaiementEnd");
            $arrayParameters['datePaiementStart'] = $datePaiementStart;
            $arrayParameters['datePaiementEnd'] = $datePaiementEnd;
        }

        if(!is_null($consultant)){
            $queryBuilder->andWhere("b.consultant = :consultant");
            $arrayParameters['consultant'] = $consultant;
        }

        $explodeNumFacture = explode("-", $numeroFacture);
        $numFactu = $explodeNumFacture[0];
        if(count($explodeNumFacture) == 2)
            $anneeFactu = $explodeNumFacture[1];
        elseif (count($explodeNumFacture) == 3)
            $anneeFactu = $explodeNumFacture[2];
        
        if(!is_null($numeroFacture) && $numeroFacture != ""){
            if($numFactu != "" && $anneeFactu == ""){
                $queryBuilder->andWhere("f.id = :numFactu");
                $arrayParameters['numFactu'] = $numFactu;
            }
            elseif ($numFactu == "" && $anneeFactu != ""){
                $queryBuilder->andWhere("f.numero LIKE :anneeFactu");
                $arrayParameters['anneeFactu'] = '%-'.$anneeFactu;
            }
            else{
                $numeroFacture = $numFactu.'-'.$anneeFactu;
                $queryBuilder->andWhere("f.numero = :numeroFacture");
                $arrayParameters['numeroFacture'] = $numeroFacture;
            }
        }

        if(!is_null($financeur)){
            $queryBuilder->andWhere("f.financeur LIKE :financeur");
            $arrayParameters['financeur'] = '%'.$financeur.'%';
        }

        if(!is_null($villeMer)){
            $queryBuilder->andWhere("v.nom LIKE :villeMer");
            $arrayParameters['villeMer'] = '%'.$villeMer.'%';
        }
        $queryBuilder->setParameters($arrayParameters);

        $queryBuilder->orderBy("f.id", "DESC");

        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;

    }

    public function getByStatusSincedate()
    {
        $queryBuilder = $this->createQueryBuilder("f")
            ->where('f.id = 349')
            ->orderBy("f.id", "ASC");
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;

    }

    public function getFactureAvecHistorique()
    {
        $queryBuilder = $this->createQueryBuilder('f')
            ->innerJoin('f.historiquesPaiement', 'h')
            ->orderBy('h.id', 'DESC')
       ;
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;
    }
}

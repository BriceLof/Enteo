<?php

namespace Application\PlateformeBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * BureauRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BureauRepository extends EntityRepository
{

    public function findAll2($city = null, $limit = null, $entheor = false)
    {
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('Application\PlateformeBundle\Entity\Bureau', 'o');

        $query = 'SELECT o.*';

        if (!is_null($city)) {
            $query .= ', (((acos(sin((' . $city->getLatitude() . '*pi()/180))
                        * sin((c.latitude * pi()/180)) + cos((' . $city->getLatitude() . '*pi()/180))
                        * cos((c.latitude * pi()/180)) * cos(((' . $city->getLongitude() . '- c.longitude)*pi()/180))))*180/pi())*60*2.133) as distance';
        }

        $query .= ' FROM bureau o';
        $params = array();

        $query .= ' INNER JOIN ville c ON o.ville_id = c.id';

        $query .= ' WHERE 1';

        $query .= ' AND o.supprimer = 0';

        if ($entheor == true){
            $query .= ' AND o.enabled_entheor = 1';
        }

        if (!is_null($city)) {
            $query .= ' HAVING distance < 50';
            $query .= ' ORDER BY distance';
        }

        if (!is_null($limit)) {
            $query .= ' LIMIT ' . $limit;
        }

        $request = $this->getEntityManager()->createNativeQuery($query, $rsm);
        $request->setParameters($params);

        return $request->getResult();
    }

    public function findAll()
    {
        parent::findAll();
        $queryBuilder = $this->createQueryBuilder("b")
            ->leftJoin('b.ville', 'v')
            ->addSelect('v')
            ->where('b.supprimer = 0')
            ->orderBy("v.nom", "ASC");
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;
    }

    // Recuperer l'id du bureau par rapport Ã  la ville
    public function retreiveBureau($ville)
    {
        return
            $this
                ->createQueryBuilder('b')
                ->where('b.ville = :ville')
                ->setParameter('ville', $ville)
                ->getQuery()
                ->getResult();
    }

    public function getBureaux($ville)
    {
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('Application\PlateformeBundle\Entity\Bureau', 'b');
        $rsm->addJoinedEntityFromClassMetadata('Application\PlateformeBundle\Entity\Ville', 'v', 'b');

        $query = 'SELECT b.* FROM bureau b WHERE 1';
        $params = array();

        if (!is_null($ville)) {
            $query .= ' AND b.ville_id = :villeId';
            $params['villeId'] = $ville->getId();
        }

        $request = $this->getEntityManager()->createNativeQuery($query, $rsm);
        $request->setParameters($params);

        return $request;
    }

    public function getBureauByDpt($dpt)
    {
        $queryBuilder = $this->createQueryBuilder('b')
            ->innerJoin('b.ville', 'v')
            ->where('v.dpt = :dpt')
            ->setParameter('dpt', $dpt);
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;
    }
}
